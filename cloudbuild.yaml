# Copyright 2021 Google LLC
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#      http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:

- id: 'Deploy to Cloud Run'
  name: 'gcr.io/cloud-builders/gcloud:latest'
  entrypoint: /bin/bash
  env:
    - 'IMAGE_NAME=$_REPO_HOST/$PROJECT_ID/$_REPO_NAME/hello-spring:latest'
  args:
    - '-c'
    - |
      gcloud run deploy ${_SERVICE_NAME}-$BUILD_ID \
        --image $_REPO_HOST/$PROJECT_ID/$REPO_NAME/hello-spring:latest \
        --region ${_DEPLOY_REGION} \
        --no-allow-unauthenticated

- id: 'Retrieve Service URL'
  name: 'gcr.io/cloud-builders/gcloud:latest'
  entrypoint: /bin/bash
  args:
    - '-c'
    - |
      set -e
      source /workspace/common.sh
      echo $(get_url ${BUILD_ID}) > _service_url
      echo $(get_idtoken) > _id_token
  env:
    - '_SERVICE_NAME=${_SERVICE_NAME}'
    - '_DEPLOY_REGION=${_DEPLOY_REGION}'
    - 'BUILD_ID=${BUILD_ID}'
    - 'PROJECT_ID=gradle-example'
  
# - id: 'Run System Tests'
#   name: golang
#   entrypoint: /bin/bash
#   args:
#     - '-c'
#     - |
#       export BASE_URL=$(cat _service_url)
#       export ID_TOKEN=$(cat _id_token)
#       go test -tags=system -v ./...

# # Clean up system test resources
# - id: 'Delete image and service'
#   name: 'gcr.io/cloud-builders/gcloud'
#   entrypoint: '/bin/bash'
#   args:
#     - '-c'
#     - |
#       gcloud artifact docker images delete $_GCR_HOSTNAME/$PROJECT_ID/$_REPOSITORY/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA --quiet
#       gcloud run services delete ${_SERVICE_NAME}-$BUILD_ID --region ${_DEPLOY_REGION} --quiet

substitutions:
  # _GCR_HOSTNAME: us-docker.pkg.dev
  # _SERVICE_NAME: microservice-template
  _DEPLOY_REGION: us-central1
  _REPOSITORY: global
  _PLATFORM: managed
  _SERVICE_NAME: gradle-example
  _LABELS: gcb-trigger-id=3f866f4a-ff52-482c-8430-bba424663777
  _TRIGGER_ID: 3f866f4a-ff52-482c-8430-bba424663777
  _GCR_HOSTNAME: us.gcr.io
  _REPO_HOST: us-docker.pkg.dev
  _REPO_NAME: global

# options:
#   volumes:
#   - name: go-modules
#     path: /go


# steps:
#   - name: gcr.io/cloud-builders/docker
#     args:
#       - build
#       - '--no-cache'
#       - '-t'
#       - '$_GCR_HOSTNAME/$PROJECT_ID/global/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA'
#       - .
#       - '-f'
#       - Dockerfile
#     id: Build
#   - name: gcr.io/cloud-builders/docker
#     args:
#       - push
#       - '$_GCR_HOSTNAME/$PROJECT_ID/global/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA'
#     id: Push
#   - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
#     args:
#       - run
#       - services
#       - update
#       - $_SERVICE_NAME
#       - '--platform=managed'
#       - >-
#         --image=$_GCR_HOSTNAME/$PROJECT_ID/global/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA
#       - >-
#         --labels=managed-by=gcp-cloud-build-deploy-cloud-run,commit-sha=$COMMIT_SHA,gcb-build-id=$BUILD_ID,gcb-trigger-id=$_TRIGGER_ID,$_LABELS
#       - '--region=$_DEPLOY_REGION'
#       - '--quiet'
#     id: Deploy
#     entrypoint: gcloud
# images:
#   - '$_GCR_HOSTNAME/$PROJECT_ID/global/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA'
# options:
#   substitutionOption: ALLOW_LOOSE
# substitutions:
#   _PLATFORM: managed
#   _SERVICE_NAME: go-test
#   _LABELS: gcb-trigger-id=3f866f4a-ff52-482c-8430-bba424663777
#   _TRIGGER_ID: 3f866f4a-ff52-482c-8430-bba424663777
#   _DEPLOY_REGION: us-central1
#   _GCR_HOSTNAME: us.gcr.io
tags:
  - gcp-cloud-build-deploy-cloud-run
  - gcp-cloud-build-deploy-cloud-run-managed
  - gradle-example